name: CI/CD â€” Lambda (Rotate & Purge IAM Keys)

on:
  push:
    branches: ["main"]
    paths:
      - "lambdas/**"
      - ".github/workflows/ci-cd-lambda.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "lambdas/**"
      - ".github/workflows/ci-cd-lambda.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment label for the deployment (badge only)"
        required: true
        default: "dev"
        type: choice
        options: ["dev","stage","prod"]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ROTATE_FUNC_NAME: rotate-and-deactivate-keys
  PURGE_FUNC_NAME:  purge-deactivated-keys
  ARTIFACT_DIR: artifacts
  ROTATE_ZIP: artifacts/rotate_and_deactivate_keys.zip
  PURGE_ZIP:  artifacts/purge_deactivated_keys.zip

# Per run concurrency so queued runs don't block each other
concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Ruff (lint)
        run: |
          ruff --version
          ruff check --output-format=github lambdas

  test:
    name: Test (pytest)
    runs-on: ubuntu-24.04
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install pytest boto3 botocore moto

      - name: Run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
          AWS_REGION: ${{ env.AWS_REGION }}
          TARGET_USERNAME: ${{ secrets.TARGET_USERNAME }}
          SECRET_NAME:     ${{ secrets.SECRET_NAME }}
          SNS_TOPIC_ARN:   ${{ secrets.SNS_TOPIC_ARN }}
          SECRET_JSON_KEY: ${{ secrets.SECRET_JSON_KEY || 'current' }}
        run: pytest -q

  deploy:
    name: Deploy (package + Lambda update)
    runs-on: ubuntu-24.04
    needs: [test]
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      #PRE-FLIGHT SECRET CHECKS (fail fast if missing)
      - name: Check required secrets
        shell: bash
        env:
          ROTATE_LAMBDA_ROLE_ARN: ${{ secrets.ROTATE_LAMBDA_ROLE_ARN }}
          PURGE_LAMBDA_ROLE_ARN:  ${{ secrets.PURGE_LAMBDA_ROLE_ARN }}
          TARGET_USERNAME:         ${{ secrets.TARGET_USERNAME }}
          SECRET_NAME:             ${{ secrets.SECRET_NAME }}
          SNS_TOPIC_ARN:           ${{ secrets.SNS_TOPIC_ARN }}
        run: |
          set -euo pipefail
          : "${ROTATE_LAMBDA_ROLE_ARN:?Missing secret ROTATE_LAMBDA_ROLE_ARN}"
          : "${PURGE_LAMBDA_ROLE_ARN:?Missing secret PURGE_LAMBDA_ROLE_ARN}"
          : "${TARGET_USERNAME:?Missing secret TARGET_USERNAME}"
          : "${SECRET_NAME:?Missing secret SECRET_NAME}"
          : "${SNS_TOPIC_ARN:?Missing secret SNS_TOPIC_ARN}"
          echo "All required secrets present."

      #Build artifacts (robust: always produces a zip even with no deps)
      - name: Prep artifact directory
        run: mkdir -p "${ARTIFACT_DIR}"

      - name: Build ZIP (rotate)
        working-directory: lambdas/rotate_and_deactivate_keys
        run: |
          set -euo pipefail
          rm -f ../../${{ env.ROTATE_ZIP }} || true
          rm -rf build && mkdir -p build
          # Install dependencies into build/ if requirements exist
          if [ -s requirements.txt ]; then
            pip install -r requirements.txt -t build
          fi
          # Add handler
          cp app.py build/
          # Zip everything
          (cd build && zip -r ../../../${{ env.ROTATE_ZIP }} .)

      - name: Build ZIP (purge)
        working-directory: lambdas/purge_deactivated_keys
        run: |
          set -euo pipefail
          rm -f ../../${{ env.PURGE_ZIP }} || true
          rm -rf build && mkdir -p build
          if [ -s requirements.txt ]; then
            pip install -r requirements.txt -t build
          fi
          cp app.py build/
          (cd build && zip -r ../../../${{ env.PURGE_ZIP }} .)

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-zips-${{ github.run_id }}
          path: |
            ${{ env.ROTATE_ZIP }}
            ${{ env.PURGE_ZIP }}

      
      - name: Deploy Lambda (rotate)
        shell: bash
        env:
          FUNC_NAME: ${{ env.ROTATE_FUNC_NAME }}
          ROLE_ARN:  ${{ secrets.ROTATE_LAMBDA_ROLE_ARN }}
          ZIP:       ${{ env.ROTATE_ZIP }}
        run: |
          set -euo pipefail
          if aws lambda get-function --function-name "$FUNC_NAME" >/dev/null 2>&1; then
            echo "Function exists; wait ACTIVE then update code..."
            aws lambda wait function-active --function-name "$FUNC_NAME" || true
            aws lambda update-function-code --function-name "$FUNC_NAME" --zip-file "fileb://$ZIP"
            aws lambda wait function-updated --function-name "$FUNC_NAME"
          else
            echo "Creating function $FUNC_NAME..."
            aws lambda create-function \
              --function-name "$FUNC_NAME" \
              --runtime python3.12 \
              --handler app.lambda_handler \
              --role "$ROLE_ARN" \
              --timeout 60 \
              --memory-size 256 \
              --zip-file "fileb://$ZIP"
            echo "Waiting until ACTIVE..."
            aws lambda wait function-active --function-name "$FUNC_NAME"
          fi
          echo "Updating configuration (env vars)..."
          aws lambda update-function-configuration \
            --function-name "$FUNC_NAME" \
            --environment "Variables={TARGET_USERNAME=${{ secrets.TARGET_USERNAME }},SECRET_NAME=${{ secrets.SECRET_NAME }},SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SECRET_JSON_KEY=${{ secrets.SECRET_JSON_KEY || 'current' }}}"
          aws lambda wait function-updated --function-name "$FUNC_NAME"

      - name: Deploy Lambda (purge)
        shell: bash
        env:
          FUNC_NAME: ${{ env.PURGE_FUNC_NAME }}
          ROLE_ARN:  ${{ secrets.PURGE_LAMBDA_ROLE_ARN }}
          ZIP:       ${{ env.PURGE_ZIP }}
        run: |
          set -euo pipefail
          if aws lambda get-function --function-name "$FUNC_NAME" >/dev/null 2>&1; then
            echo "Function exists; wait ACTIVE then update code..."
            aws lambda wait function-active --function-name "$FUNC_NAME" || true
            aws lambda update-function-code --function-name "$FUNC_NAME" --zip-file "fileb://$ZIP"
            aws lambda wait function-updated --function-name "$FUNC_NAME"
          else
            echo "Creating function $FUNC_NAME..."
            aws lambda create-function \
              --function-name "$FUNC_NAME" \
              --runtime python3.12 \
              --handler app.lambda_handler \
              --role "$ROLE_ARN" \
              --timeout 60 \
              --memory-size 256 \
              --zip-file "fileb://$ZIP"
            echo "Waiting until ACTIVE..."
            aws lambda wait function-active --function-name "$FUNC_NAME"
          fi
          echo "Updating configuration (env vars)..."
          aws lambda update-function-configuration \
            --function-name "$FUNC_NAME" \
            --environment "Variables={TARGET_USERNAME=${{ secrets.TARGET_USERNAME }},SECRET_NAME=${{ secrets.SECRET_NAME }},SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SECRET_JSON_KEY=${{ secrets.SECRET_JSON_KEY || 'current' }}}"
          aws lambda wait function-updated --function-name "$FUNC_NAME"
