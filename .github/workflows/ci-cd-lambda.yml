name: CI / CD (Lambda - Lint, Test, Deploy)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: "3.12"
  ROTATE_FUNC_NAME: rotate-and-deactivate-keys
  PURGE_FUNC_NAME: purge-deactivated-keys

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test-package-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # -------- LINT --------
      - name: Install lint & test deps
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.6.9 pytest pytest-mock
          # Install runtime libs needed only for import-time (tests import boto3)
          pip install boto3 botocore
      - name: Ruff lint
        run: ruff check --output-format=github .

      # -------- TEST --------
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q

      # -------- PACKAGE: rotate --------
      - name: Package rotate_and_deactivate_keys
        working-directory: lambdas/rotate_and_deactivate_keys
        run: |
          rm -rf package ../../rotate_and_deactivate_keys.zip
          if [ -s requirements.txt ]; then
            pip install -r requirements.txt -t package
          else
            mkdir -p package
          fi
          cd package && zip -r ../../../rotate_and_deactivate_keys.zip . && cd ..
          # add only the handler file (exclude tests from artifact)
          zip -g ../../rotate_and_deactivate_keys.zip app.py

      # -------- PACKAGE: purge --------
      - name: Package purge_deactivated_keys
        working-directory: lambdas/purge_deactivated_keys
        run: |
          rm -rf package ../../purge_deactivated_keys.zip
          if [ -s requirements.txt ]; then
            pip install -r requirements.txt -t package
          else
            mkdir -p package
          fi
          cd package && zip -r ../../../purge_deactivated_keys.zip . && cd ..
          zip -g ../../purge_deactivated_keys.zip app.py

      # -------- AUTH (STATIC KEYS) --------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # -------- CREATE IF MISSING / DEPLOY --------
      - name: Ensure ${{ env.ROTATE_FUNC_NAME }} exists
        shell: bash
        run: |
          if ! aws lambda get-function --function-name "${ROTATE_FUNC_NAME}" >/dev/null 2>&1; then
            aws lambda create-function \
              --function-name "${ROTATE_FUNC_NAME}" \
              --runtime python3.12 \
              --handler app.lambda_handler \
              --role "${{ secrets.ROTATE_LAMBDA_ROLE_ARN }}" \
              --timeout 60 \
              --memory-size 256 \
              --zip-file fileb://rotate_and_deactivate_keys.zip
          fi

      - name: Deploy ${{ env.ROTATE_FUNC_NAME }}
        run: |
          aws lambda update-function-code \
            --function-name "${ROTATE_FUNC_NAME}" \
            --zip-file fileb://rotate_and_deactivate_keys.zip
          aws lambda update-function-configuration \
            --function-name "${ROTATE_FUNC_NAME}" \
            --environment "Variables={TARGET_USERNAME=${{ secrets.TARGET_USERNAME }},SECRET_NAME=${{ secrets.SECRET_NAME }},SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},SECRET_JSON_KEY=${{ secrets.SECRET_JSON_KEY || 'current' }}}"

      - name: Ensure ${{ env.PURGE_FUNC_NAME }} exists
        shell: bash
        run: |
          if ! aws lambda get-function --function-name "${PURGE_FUNC_NAME}" >/dev/null 2>&1; then
            aws lambda create-function \
              --function-name "${PURGE_FUNC_NAME}" \
              --runtime python3.12 \
              --handler app.lambda_handler \
              --role "${{ secrets.PURGE_LAMBDA_ROLE_ARN }}" \
              --timeout 60 \
              --memory-size 256 \
              --zip-file fileb://purge_deactivated_keys.zip
          fi

      - name: Deploy ${{ env.PURGE_FUNC_NAME }}
        run: |
          aws lambda update-function-code \
            --function-name "${PURGE_FUNC_NAME}" \
            --zip-file fileb://purge_deactivated_keys.zip
          aws lambda update-function-configuration \
            --function-name "${PURGE_FUNC_NAME}" \
            --environment "Variables={TARGET_USERNAME=${{ secrets.TARGET_USERNAME }}}"
