name: Infra Provisioning (Terraform with Remote Backend)

on:
  pull_request:
    branches: ["main"]
    paths:
      - "terraform/**"
      - ".github/workflows/infra-provision.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options: ["dev", "stage", "prod"]
      action:
        description: "Terraform action (plan or apply)"
        required: true
        default: "plan"
        type: choice
        options: ["plan", "apply"]

permissions:
  contents: read

env:
  TF_VERSION: "1.8.5"
  TF_WORKING_DIR: terraform
  TF_STATE_KEY_PREFIX: key-rotation

jobs:
  lint-validate:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY_PREFIX }}/${{ github.event.inputs.environment || 'dev' }}.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      # --- Make fmt reliable on Linux runners ---
      - name: Normalize line endings for .tf/.tfvars
        run: |
          sudo apt-get update && sudo apt-get install -y dos2unix
          git ls-files '*.tf' '*.tfvars' | xargs -I{} dos2unix {}

      # Write fmt so whitespace never blocks the run
      - name: Terraform fmt (write)
        run: terraform fmt -recursive

      # Keep a check step (will pass since we wrote fmt above)
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

  plan:
    needs: [lint-validate]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY_PREFIX }}/${{ github.event.inputs.environment || 'dev' }}.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          terraform plan -input=false -out=tfplan.bin \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="target_username=${{ secrets.TARGET_USERNAME }}" \
            -var="secret_name=${{ secrets.SECRET_NAME }}" \
            -var="secret_json_key=${{ secrets.SECRET_JSON_KEY || 'current' }}"
          terraform show -no-color tfplan.bin > tfplan.txt

      - uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.run_id }}
          path: ${{ env.TF_WORKING_DIR }}/tfplan.txt

  apply:
    needs: [lint-validate]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY_PREFIX }}/${{ github.event.inputs.environment || 'dev' }}.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        run: |
          terraform apply -input=false -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="target_username=${{ secrets.TARGET_USERNAME }}" \
            -var="secret_name=${{ secrets.SECRET_NAME }}" \
            -var="secret_json_key=${{ secrets.SECRET_JSON_KEY || 'current' }}"
