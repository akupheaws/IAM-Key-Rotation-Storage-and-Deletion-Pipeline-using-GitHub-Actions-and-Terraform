name: Infra Provisioning (Terraform with Remote Backend)

on:
  pull_request:
    branches: ["main"]
    paths:
      - "terraform/**"
      - ".github/workflows/infra-provision.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options: ["dev", "stage", "prod"]
      action:
        description: "plan or apply"
        required: true
        default: "plan"
        type: choice
        options: ["plan", "apply"]
      enable_eventbridge_targets:
        description: "Attach EventBridge targets?"
        required: true
        default: "false"
        type: choice
        options: ["true", "false"]

permissions:
  contents: read

env:
  TF_VERSION: "1.8.5"
  TF_WORKING_DIR: terraform
  # If workflow_dispatch, use provided env var-file; otherwise default to dev.tfvars
  TF_VAR_FILE: ${{ inputs.environment && format('env/{0}.tfvars', inputs.environment) || 'env/dev.tfvars' }}
  # Compose the remote state key per env; defaults to dev when not workflow_dispatch
  TF_STATE_KEY: ${{ format('{0}/{1}.tfstate', secrets.TF_STATE_KEY_PREFIX, inputs.environment || 'dev') }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-validate:
    name: Terraform Fmt / Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Format (check)
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate

  plan:
    name: Terraform Plan
    needs: [lint-validate]
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.action == 'plan') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          if [ -f "${{ env.TF_VAR_FILE }}" ]; then
            terraform plan -input=false -out=tfplan.bin -var-file="${{ env.TF_VAR_FILE }}" -var="enable_eventbridge_targets=${{ inputs.enable_eventbridge_targets || 'false' }}"
          else
            terraform plan -input=false -out=tfplan.bin -var="enable_eventbridge_targets=${{ inputs.enable_eventbridge_targets || 'false' }}"
          fi
          terraform show -no-color tfplan.bin > tfplan.txt

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.run_id }}
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan.bin
            ${{ env.TF_WORKING_DIR }}/tfplan.txt

  apply:
    name: Terraform Apply
    needs: [lint-validate]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.action == 'apply' }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Plan for visibility
        run: |
          if [ -f "${{ env.TF_VAR_FILE }}" ]; then
            terraform plan -input=false -out=tfplan-apply.bin -var-file="${{ env.TF_VAR_FILE }}" -var="enable_eventbridge_targets=${{ inputs.enable_eventbridge_targets || 'false' }}"
          else
            terraform plan -input=false -out=tfplan-apply.bin -var="enable_eventbridge_targets=${{ inputs.enable_eventbridge_targets || 'false' }}"
          fi
          terraform show -no-color tfplan-apply.bin > tfplan-apply.txt

      - name: Apply
        run: terraform apply -input=false -auto-approve tfplan-apply.bin
